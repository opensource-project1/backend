// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  googleId         String?          @unique
  email            String           @unique
  name             String
  password         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  blocks           Block[]
  focuses          Focus[]
  emergencyRequests EmergencyRequest[]
  todos            Todo[]
  userSetting      UserSetting?
  focusLogs        FocusLog[]
}

model Block {
  id          Int      @id @default(autoincrement())
  userId      Int
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Focus {
  id          Int      @id @default(autoincrement())
  userId      Int
  startTime   DateTime
  endTime     DateTime
  status      String   // enum으로 직접 지정 가능
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model EmergencyRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  focusId     Int
  reason      String
  requestedAt DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model Todo {
  id          Int      @id @default(autoincrement())
  userId      Int
  content     String
  isDone      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model UserSetting {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  blockNotification  Boolean
  theme              String
  createdAt          DateTime @default(now())

  user               User     @relation(fields: [userId], references: [id])
}

model FocusLog {
  id             Int      @id @default(autoincrement())
  userId         Int
  date           DateTime
  totalFocusTime Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}
enum FocusStatus {
  ONGOING
  COMPLETED
  CANCELED
}

